# AUTOGENERATED! DO NOT EDIT! File to edit: dev/06_Pipe.ipynb (unless otherwise specified).

__all__ = ['SiameseSpec', 'SiamesePiar', 'AudioPipe']

# Cell
from .imports import *
from .data import *
from .core import *
from .masks import *
from .utils import *

# Cell
class SiameseSpec(Tuple):
    def show(self, ctx=None, **kwargs):
        self[0].show()
        self[1].show()

# Cell
class SiamesePiar(Transform):
    def __init__(self, items, labels):
        store_attr(self, 'items,labels')
        self.assoc = self
        sortlbl = sorted(enumerate(labels), key=itemgetter(1))
        self.clsmap = {k:L(v).itemgot(0) for k,v in itertools.groupby(sortlbl, key=itemgetter(1))}
        self.idxs = range_of(self.items)

    def encodes(self, i:int)->None:
        othercls=self.clsmap[self.labels[i]] if random.random()>0.5 else self.idxs
        othercls=self.idxs
        otherit = random.choice(othercls)
        return SiameseSpec(self.items[i], self.items[otherit])

# Cell
def AudioPipe(path):
    items = get_audio_files(path)
    sp = SiamesePiar(items, items.map(parent_label))
    return Pipeline([sp, AudioMono.create, Resample(22050), Clip(5), Mixer, Spectify(), Decibelify()])