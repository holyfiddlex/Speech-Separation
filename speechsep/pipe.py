# AUTOGENERATED! DO NOT EDIT! File to edit: nbdev/06_Pipe.ipynb (unless otherwise specified).

__all__ = ['SiamesePiar', 'Group', 'AudioPipe']

# Cell
from .imports import *
from .data import *
from .core import *
from .masks import *
from .utils import *

# Cell
class SiamesePiar(Transform):
    def __init__(self, items, labels):
        store_attr(self, 'items,labels')
        self.assoc = self
        sortlbl = sorted(enumerate(labels), key=itemgetter(1))
        self.clsmap = {k:L(v).itemgot(0) for k,v in itertools.groupby(sortlbl, key=itemgetter(1))}
        self.idxs = range_of(self.items)

    def encodes(self, i:int)->None:
        othercls=self.clsmap[self.labels[i]] if random.random()>0.5 else self.idxs
        othercls=self.idxs
        otherit = random.choice(othercls)
        return Tuple(self.items[i], self.items[otherit])

# Cell
class Group(Transform):
    as_item_force=True
    def encodes(self, audioList):
        return Tuple(audioList[0], Tuple(audioList[1:]))
    def decodes(self, audioList):
        return Tuple(audioList[0], *Tuple(audioList[1]))

# Cell
def AudioPipe(path, sr=22050, duration=5):
    items = get_audio_files(path)
    sp = SiamesePiar(items, items.map(parent_label))
    return Pipeline([sp, AudioMono.create, Resample(sr), Clip(duration), Mixer, Spectify(), Unet_Trimmer(8), Normalize(), Decibelify(), Group()])