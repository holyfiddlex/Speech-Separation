#AUTOGENERATED! DO NOT EDIT! File to edit: dev/00_core.ipynb (unless otherwise specified).

__all__ = ['load_audio', 'AudioItem', 'toSpec', 'SpecBase']

#Cell
from .imports import *
import speechsep.utils as utils
import speechsep.plot as plot

#Cell
@delegates(load)
def load_audio(fn, **kwargs):
    return load(fn)

#Cell
class AudioItem():
    def __init__(self, filename=None, signal=None, sample_rate=None):
        self.fn = filename
        if signal is None         : self.sig, self._sr = load_audio(self.fn)
        else                      : self.sig, self._sr = signal, sample_rate
        if sample_rate:
            self.sr = sample_rate
        elif self.sr is None:
            raise ValueError('sample_rate must be calculated or given')
    def __repr__(self):
        display(Audio(self.sig, rate=self.sr))
        return f'{self.__str__()}'
    def __str__(self):
        return f'{self.fn}, {len(self.sig)/self.sr}secs at {self.sr} samples per second'
    @delegates(Line2D)
    def show(self, **kwargs):
        plt.plot(self.sig, **kwargs)
    @property
    def sr(self): return self._sr
    @sr.setter
    def sr(self, new_sr):
        if self._sr != new_sr:
            self.sig = utils.Resample(new_sr)(self.sig, self.sr)
        self._sr = new_sr

#Cell
def toSpec(audio:AudioItem):
    pass

#Cell
class SpecBase():
    def __init__(self, spec, sr, name=None):
        self.data = spec
        self.sr = sr
        self.name = name
    @classmethod
    def create(cls, fn, sr=None, name=None):
        "Open an `Audio` from path `fn`"
        if isinstance(fn,(Path,str)): return cls.create(AudioItem(fn, sr), name=name)
        elif isinstance(fn,AudioItem): return toSpec(fn.sig, fn.sr, name)
        elif isinstance(fn,np.ndarray): return cls(fn, sr, name)
        raise ValueError('fn must be ndarray, AudioItem or Path')