#AUTOGENERATED! DO NOT EDIT! File to edit: dev/00_core.ipynb (unless otherwise specified).

__all__ = ['load_audio', 'AudioItem', 'toSpec', 'SpecBase']

#Cell
from .imports import *
import speechsep.utils as utils
import speechsep.plot as plot

#Cell
@delegates(load)
def load_audio(fn, **kwargs):
    return load(fn)

#Cell
class AudioItem():
    def __init__(self, filename=None, signal=None, sample_rate=None):
        self.fn = filename
        if signal is None         : self.sig, self._sr = load_audio(self.fn)
        else                      : self.sig, self._sr = signal, sample_rate
        if sample_rate:
            self.sr = sample_rate
        elif self.sr is None:
            raise ValueError('sample_rate must be calculated or given')
    def __repr__(self):
        display(Audio(self.sig, rate=self.sr))
        return f'{self.__str__()}'
    def __str__(self):
        return f'{self.fn}, {len(self.sig)/self.sr}secs at {self.sr} samples per second'
    @delegates(Line2D)
    def show(self, **kwargs):
        plt.plot(self.sig, **kwargs)
    @property
    def sr(self): return self._sr
    @sr.setter
    def sr(self, new_sr):
        if self._sr != new_sr:
            self.sig = utils.Resample(new_sr)(self.sig, self.sr)
        self._sr = new_sr

#Cell
class toSpec(core.Transform):
    def __init__(self, fftsize=512, win_mult=2, overlap=0.5, freq='linear', amp='linear'):
        self.fftsize = fftsize
        self.win_mult = win_mult
        self.overlap = overlap
        self.freq = freq
        self.amp = amp
    def encodes(self, audio:AudioItem):
        spec = utils.stft(audio.sig, self.fftsize, self.win_mult, self.overlap)
        return SpecBase(spec, audio.sr, audio.fn)
    def decodes(self, spec):
        audio = utils.istft(spec.data, self.fftsize, self.win_mult, self.overlap)
        return AudioItem(spec.fn, audio, spec.sr)


#Cell
class SpecBase():
    def __init__(self, spec, sr, fn=None):
        self.data = spec
        self.sr = sr
        self.fn = fn
        self._plt_params = {}
    @delegates(plot.setup_graph)
    def show(self, ctx=None, **kwargs):
        plot.setup_graph(**kwargs)
        plt.pcolormesh(abs(spec.data[:spec.data.shape[0]//2]))
    @property
    def plt_params(self): return self._plt_params
    @plt_params.setter
    @delegates(plt.pcolormesh)
    def plt_params(self, **kwargs):
        self._plot = partial(plt.pcolormesh, **kwargs)
        self._plt_params = dict(**kwargs)