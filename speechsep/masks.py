# AUTOGENERATED! DO NOT EDIT! File to edit: dev/05_Masks.ipynb (unless otherwise specified).

__all__ = ['MaskBase', 'MaskBinary', 'MaskcIRM']

# Cell
class MaskBase():
    _show_args={}
    def __init__(self, data, spec_func):
        store_attr(self, 'data', 'spec_func')
    @property
    def shape(self):
        return self.data.shape
    @classmethod
    def create(cls, audios):
        joined = join_audios(audios)
        return [cls.generate(audio, joined) for audio in audios]
    def __mul__(self, spec):
        raise NotImplementedError('This function needs to be implemented before use')
    def __rmul__(self, spec):
        return self*spec
    def generate(self, audio, joined):
        raise NotImplementedError('This function needs to be implemented before use')
    @delegates(setup_graph)
    def show(x:MaskBase, ctx=None, **kwargs): return show_mask(x, ctx=ctx, **merge(x._show_args, kwargs))


# Cell
class MaskBinary(MaskBase):
    def __mul__(self, spec):
        new_spec = SpecImage(spec.data*self.data, spec.sr, spec.fn)
        return new_spec
    @classmethod
    def generate(cls, audio, joined):
        specs = self.spec_func(audio)
        return (joined.data <= spec.data)*1

# Cell
class MaskcIRM(MaskBase):
    def __mul__(self, spec):
        new_spec = SpecImage(spec.data*self.data, spec.sr, spec.fn)
        return new_spec
    @classmethod
    def generate(cls, audio, joined):
        specs = self.spec_func(audio)
        return (joined.data <= spec.data)*1